# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

api:

logger:
  default: info
# logs:
#   homeassistant.components.recorder: debug

# Text to speech
tts:
  - platform: google_translate

# My own handmade automations
automation manual: !include_dir_list automations/
automation ui: !include automations.yaml
binary_sensor: !include binary_sensors.yaml
group: !include groups.yaml
input_boolean: !include_dir_named input_booleans
input_number: !include_dir_merge_list  input_numbers/
light: !include_dir_list lights
mqtt: !include_dir_merge_named  mqtt/
python_script:
script: !include scripts.yaml
scene: !include scenes.yaml
sensor: !include_dir_list sensors/
switch: !include switches.yaml
template: !include_dir_list templates/
zone: !include zones.yaml

homeassistant:
  customize: !include_dir_merge_named customizations/
  customize_glob: !include_dir_merge_named customizations_glob/

#nest:
#  client_id: !secret nest_client_id
#  client_secret: !secret nest_client_secret
#  project_id: !secret nest_project_id
#
# google:
#   client_id: !secret google_client_id
#   client_secret: !secret google_client_secret

  # Really crappy tuya hack
system_log:
  fire_event: true

sonoff:
  username: !secret sonoff_username
  password: !secret sonoff_password
  reload: always
  force_update: [power]
  sensors: [power, current, voltage]

panel_custom:
  - name: ha_integ
    sidebar_title: Integrations
    sidebar_icon: mdi:chip
    js_url: /api/hassio/app/entrypoint.js
    url_path: "config/integrations"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator
  - name: ha_auto
    sidebar_title: Automations
    sidebar_icon: mdi:cog-outline
    js_url: /api/hassio/app/entrypoint.js
    url_path: "config/automation"
    embed_iframe: true
    require_admin: true
    config:
      ingress: core_configurator

## InfluxDB
#influxdb:
#  host: 192.168.86.248
#  port: 8086
#  ssl: false
#  database: homeassistant
#  username: !secret influxdb_user
#  password: !secret influxdb_password
#  max_retries: 3
#  measurement_attr: entity_id
#  include:
#    domains:
#      - sensor
#
momentary:

recorder:
  db_url: !secret db_url
  purge_keep_days: 14
  exclude:
    entities:
      - sensor.last_boot
      - sensor.date
    entity_globs:
      - sensor.weather_*
      - sensor.*uptime*


input_text:
  alexa_actionable_notification:
    name: Alexa Actionable Notification Holder
    max: 255
    initial: '{"text": "This is a test of the alexa actions custom skill. Did it work?", "event": "actionable.skill.test"}'

# Enable font awesome, downloaded via hacs
#fontawesome:

cover:
  - platform: template
    covers:
      garage_door:
        device_class: garage
        friendly_name: "Garage Door"
        unique_id: unique_id_garage_door
        position_template: |-
          {% if is_state('binary_sensor.garage_door_contact', 'on') -%}
            0
          {%- else -%}
            100
          {%- endif %}
        open_cover:
          - condition: state
            entity_id: binary_sensor.garage_door_contact
            state: "on"
          - service: switch.turn_on
            target:
              entity_id: switch.garage_door_backup
        close_cover:
          - condition: state
            entity_id: binary_sensor.garage_door_contact
            state: "off"
          - service: switch.turn_on # momentary switch
            target:
              entity_id: switch.garage_door_backup
        stop_cover:
          service: switch.turn_on
          target:
            entity_id: switch.garage_door_backup
        icon_template: >-
          {% if states('binary_sensor.garage_door_contact')|float > 0 %}
            mdi:garage-open
          {% else %}
            mdi:garage
          {% endif %}